pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'nyt-economic-sentiment-ml'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                git branch: 'main',
                    url: 'https://github.com/Fabthenabab/NYT-Economic-Sentiment-ML.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile
                    sh 'docker build -t ${DOCKER_IMAGE} ml-workflow'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'docker run --rm ${DOCKER_IMAGE} bash -c "pip install -r /app/requirements.txt"'
            }
        }

        stage('Run Unit Tests') {
            steps {
                script{
                    sh """
                    docker run --rm \
                        -v "/tmp:/test_output" \
                        -e PYTHONPATH=/app \
                        ${DOCKER_IMAGE} \
                        bash -c "cd /app && pytest tests/ --junitxml=/test_output/unit-tests.xml;ls -la /test_output;cp /test_output/unit-tests.xml /tmp/unit-tests.xml; cat /tmp/unit-tests.xml"
                    """
                } 
            }
        
        stage('Verify Persistence') {
            steps {
                script {
                    // Cette commande crée un nouveau conteneur et vérifie si le fichier unit-tests.xml existe
                    sh """
                    docker run --rm \
                        -v "/tmp:/verification" \
                        ${DOCKER_IMAGE} \
                        bash -c "ls -la /verification/unit-tests.xml && echo 'Le fichier persiste entre les steps!' || echo 'Fichier non trouvé'"
                    """
                }
    }
}
            /*post {
                always {
                    junit '/tmp/unit-tests.xml'  // Publish test results
                }
            }*/
        }

        /*stage('Run Tests Inside Docker Container') {
            steps {
                withCredentials([
                    string(credentialsId: 'mlflow-tracking-uri', variable: 'MLFLOW_TRACKING_URI'),
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                    string(credentialsId: 'backend-store-uri', variable: 'BACKEND_STORE_URI'),
                    string(credentialsId: 'artifact-root', variable: 'ARTIFACT_ROOT')
                ]) {
                    // Write environment variables to a temporary file
                    // KEEP SINGLE QUOTE FOR SECURITY PURPOSES (MORE INFO HERE: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials)
                    script {
                        writeFile file: 'env.list', text: '''
                        MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI
                        AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                        AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                        BACKEND_STORE_URI=$BACKEND_STORE_URI
                        ARTIFACT_ROOT=$ARTIFACT_ROOT
                        '''
                    }

                    // Run a temporary Docker container and pass env variables securely via --env-file
                    sh '''
                    docker run --rm --env-file env.list \
                    ml-pipeline-image \
                    bash -c "pytest --maxfail=1 --disable-warnings"
                    '''
                }
            }
        }*/
    }

    post {
        always {
            // Clean up workspace and remove dangling Docker images
            sh 'docker system prune -f'
        }
        /*success {
            sh """
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ BUILD RÉUSSI: ${env.JOB_NAME} #${env.BUILD_NUMBER}"}' \
            ${env.SLACK_WEBHOOK_CNORET}
        """
        }
        failure {
            sh """
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"❌ BUILD ÉCHOUÉ: ${env.JOB_NAME} #${env.BUILD_NUMBER}"}' \
            ${env.SLACK_WEBHOOK_CNORET}
            """
        }*/
        success {
            sh """
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ BUILD RÉUSSI: ${env.JOB_NAME} #${env.BUILD_NUMBER}", "channel":"${env.SLACK_CHANNEL}"}' \
            ${env.SLACK_WEBHOOK}
        """
        }
        failure {
            sh """
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"❌ BUILD ÉCHOUÉ: ${env.JOB_NAME} #${env.BUILD_NUMBER}", "channel":"${env.SLACK_CHANNEL}"}' \
            ${env.SLACK_WEBHOOK}
            """
        }
    }
}
